// プログラム全体
program         = { function_def | stmt } ;

// 関数シグネチャ（定義と宣言で共通）
function_sig     = type declarator;

// 関数定義
function_def     = function_sig "{" { stmt } "}" ;

// 関数のプロトタイプ宣言
prototype_decl   = function_sig ";" ;


// (文)statement
stmt            = expr ";"                        // 式文
                | decl_stmt                       // 宣言文
                | "return" expr ";"               // return 文
                | "if" "(" expr ")" stmt ["else" stmt]    // if 文
                | "while" "(" expr ")" stmt       // while 文
                | "do" stmt "while" "(" expr ")" ";" // do-while 文
                | "for" "(" [expr] ";" [expr] ";" [expr] ")" stmt // for 文
                | "continue" ";"                  // continue
                | "break" ";"                     // break
                | "goto" ident ";"                // goto 文
                | ident ":" stmt                  // ラベル
                | "{" { stmt } "}"                // ブロック文
                | "switch" "(" expr ")" "{" { case_clause } "}" ; // ← switch 文追加

case_clause     = "case" expr ":" { stmt }                  // case 節
                | "default" ":" { stmt } ;                  // default 節

// 宣言文
decl_stmt         = type init_declarator { "," init_declarator } ";" ;
init_declarator   = declarator [ "=" initializer  ] ;
initializer       = expr | "{" initializer_list "}" ;
initializer_list  = initializer { "," initializer } ;
declarator        = { "*" } direct_declarator ;
direct_declarator = ident
                  | "(" declarator ")"                      // 関数ポインタなど
                  | direct_declarator "[" [expr] "]"        // 配列
                  | direct_declarator "(" [param_list] ")" ;// 関数

// 型
type              = "int" | "char" | "void" ;

// 式(expression)
expr            = assign ;
assign          = conditional
                [ assign_op assign ] ;
assign_op       = "="
                | "+=" | "-=" | "*=" | "/=" | "%="
                | "^=" | "|=" | "&="
                | "<<=" | ">>=" ;
conditional     = logical_or [ "?" expr ":" conditional ] ;
logical_or      = logical_and { "||" logical_and } ;
logical_and     = equality    { "&&" equality } ;
equality        = relational { ("==" | "!=") relational } ;
relational      = bitwise_or { ("<" | "<=" | ">" | ">=") bitwise_or } ;
bitwise_or      = bitwise_xor { "|" bitwise_xor } ;
bitwise_xor     = bitwise_and { "^" bitwise_and } ;
bitwise_and     = bitwise_shift { "&" bitwise_shift } ;
bitwise_shift   = add { ("<<" | ">>") add } ;

add             = mul { ("+" | "-") mul } ;
mul             = unary { ("*" | "/" | "%") unary } ;
unary           = ( "++" | "--" | "+" | "-" | "*" | "&" | "!" | "~" ) unary
                | postfix ;

//後置式(postfix)
postfix = primary { 
              "[" expr "]"              // 配列アクセス
            | "(" [ arg_list ] ")"      // 関数呼び出し
            | "++" | "--"               // 後置インクリメント／デクリメント
          } ;

// プライマリ式(関数呼び出し・識別子・数値など)
primary         = ident                       // 変数
                | num                         // 整数リテラル
                | char_lit                    // 文字
                | "(" expr ")" ;              // 括弧つき式

// 関数の引数・引数リスト
arg_list        = expr { "," expr } ;
param_list      = param { "," param } ;
param           = type declarator;


// 終端記号
num         = /[0-9]+/ ;
ident       = /[a-zA-Z_][a-zA-Z0-9_]*/ ;
char_lit    = /'(\\.|[^\\'])'/ ;